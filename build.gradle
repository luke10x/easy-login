plugins {
    id 'java'
    id 'war'
    id 'maven-publish' // pom will be generated for this build for Arquillian
}

compileJava {
    sourceCompatibility = 17
    targetCompatibility = 17
}

repositories {
    mavenCentral()
}

allprojects {
    tasks.withType(JavaCompile) {
        options.deprecation = true
    }
}

configurations {
    wildFlyDistribution
}

dependencies {
    providedCompile 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
    implementation 'jakarta.mvc:jakarta.mvc-api:2.1.0'
    implementation 'org.eclipse.krazo:krazo-core:3.0.1'
    implementation 'org.eclipse.krazo:krazo-resteasy:3.0.1'

    // For QR generation
    implementation 'com.google.zxing:core:3.5.1'

    // Lombok
    compileOnly             'org.projectlombok:lombok:1.18.28'
    annotationProcessor     'org.projectlombok:lombok:1.18.28'
    testCompileOnly         'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

    // JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'

    // For gradle
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.9.2'

    // Mockito dependency
    testImplementation 'org.mockito:mockito-core:4.4.0' // Wow, that was a bit of "fun" to figure out a working version
    testImplementation 'org.mockito:mockito-junit-jupiter:3.3.3'

    // Generic Arquillian
//    implementation platform('org.jboss.arquillian:arquillian-bom:1.7.0.Final')
    testImplementation 'org.wildfly.arquillian:wildfly-arquillian-container-managed:5.0.0.Final'
    testImplementation 'org.jboss.arquillian.junit5:arquillian-junit5-container:1.7.0.Alpha14'

    // POM files internally used to create the web archive for Arquillian
    testImplementation 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-maven-plugin:3.1.4'

    // Drives MVC tests
    testImplementation 'net.sourceforge.htmlunit:htmlunit:2.70.0'

    // Just Wildfly distribution, for Arquillian
    wildFlyDistribution 'org.wildfly:wildfly-dist:27.0.1.Final@zip'
}


task setupWildFly(type: Copy) {
    from configurations.wildFlyDistribution.resolvedConfiguration.files.collect { file ->
        zipTree(file)
    }
    into "${buildDir}/wildfly-27.0.1"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Arquillian needs this pom.xml to create shrinkwrap archive
publishing {
    publications {
        sample(MavenPublication) {
            from components.java

            groupId 'dev.luke10x'
            artifactId 'shrinkwrap-for-arquillian'
            version '1.0.0'

            pom.withXml { xml ->
                def dependenciesNode = xml.asNode().dependencies[0]
                configurations.testRuntimeOnly.allDependencies.each { dependency ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                    dependencyNode.appendNode('scope', 'test')
                }
                configurations.testRuntimeClasspath.allDependencies.each { dependency ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                    dependencyNode.appendNode('scope', 'test')
                }
            }
        }
    }
}

task writeNewPom {
    dependsOn generatePomFileForSamplePublication
}

test {
    dependsOn setupWildFly
    dependsOn writeNewPom

    useJUnitPlatform()

    systemProperty 'arquillian.launch', 'wildfly-managed-no-debug'
    systemProperty 'serverConfig', 'standalone-full.xml'
    systemProperty 'jboss.home', "${buildDir}/wildfly-27.0.1/wildfly-27.0.1.Final"

    testLogging {
        events = ["passed", "failed", "skipped"]
        showStandardStreams = false
        showStackTraces = false
    }
}
